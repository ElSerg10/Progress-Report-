#include <iostream>
#include <string>
#include <iomanip>
using namespace std;

// Declare functions for better optimization and readability
void fillVehiclesInfo(string vehicles[], double pricesPerMiles[], int arraySize);
void printVehicles(string vehicles[], double pricesPerMiles[], int arraySize);

class PaymentGateway {
public:
    bool processPayment(const std::string& cardNumber, const std::string& expiryDate, const std::string& cvv, double amount) {
        if (!cardNumber.empty() && !expiryDate.empty() && !cvv.empty() && amount > 0) {
            return true;
        }
        return false;
    }
};

class RideService {
private:
    PaymentGateway paymentGateway;
    std::string paymentGatewayName;

public:
    RideService(const std::string& gatewayName) : paymentGatewayName(gatewayName) {}

    void offerRide(double distance) {
        const double baseFare = 5.0; // Base fare for the service
        const double farePerKm = 2.0; // Fare per kilometer
        double totalFare = baseFare + (farePerKm * distance);

        std::cout << "The total fare for the ride is: $" << totalFare << std::endl;

        // Simulating card payment
        std::string cardNumber, expiryDate, cvv;
        std::cout << "Please enter your card details:" << std::endl;
        std::cout << "Card Number: ";
        std::cin >> cardNumber;
        std::cout << "Expiry Date (MM/YY): ";
        std::cin >> expiryDate;
        std::cout << "CVV: ";
        std::cin >> cvv;

        bool paymentStatus = paymentGateway.processPayment(cardNumber, expiryDate, cvv, totalFare);

        if (paymentStatus) {
            std::cout << "Payment successful! Enjoy your ride." << std::endl;
        } else {
            std::cout << "Payment failed. Please check your card details and try again." << std::endl;
        }
    }

    std::string getPaymentGatewayName() const {
        return paymentGatewayName;
    }
};

int main() {
    const int NUMBER_OF_VEHICLES = 8; // Available vehicles, this is used as size of parallel arrays
    // Parallel Arrays
    string vehicles[NUMBER_OF_VEHICLES]; // to store vehicle names
    double pricesPerMiles[NUMBER_OF_VEHICLES]; // to store price per mile

    // Variables
    string name = "";
    string currentlocation = "";
    string destination = "";
    double destDistance = 0.0;
    double driveCost = 0.0;
    int vehicleIndex;
    double total;

    cout << fixed; // Outputs floating-point numbers in a fixed decimal format
    cout << setprecision(2); // Formats the output of decimal numbers to two decimal places

   
    void fillVehiclesInfo(string vehicles[], double pricesPerMiles[], int arraySize);
{
    // Fill vehicle information directly within the function
    vehicles[0] = "SUV";
    pricesPerMiles[0] = 1.5;

    vehicles[1] = "Sedan";
    pricesPerMiles[1] = 0.39;

   
}
 
    printVehicles(vehicles, pricesPerMiles, NUMBER_OF_VEHICLES);

    cout << "\nPlease Note: if distance is less than 5 miles fix dirver charge of $5 will be added,";
    cout << "\nif distance is greater than 5 miles fix dirver charge of $7 will be added.!";
    cout << endl;
    cout << "\nWhat vehicle type would you like to book (enter Index): ";
    cin >> vehicleIndex;
    if (vehicleIndex < 1 || vehicleIndex > NUMBER_OF_VEHICLES) {
        cout << "\nEntered vehicle index is not valid, try again! ";
        return 0;
    }

    cout << endl;
    cin.ignore(); // Line clears or ignores the newline from the stream.
    // Get Name
    cout << "Enter your Name: ";
    getline(cin, name);
    cout << endl;

    // Get Current Location
    cout << "Enter your Current location: ";
    getline(cin, currentlocation);
    cout << endl;

    // Get Destination
    cout << "Enter your destination: ";
    getline(cin, destination);
    cout << endl;

    // Get Destination length in miles
    cout << "How far away is your destination in miles? ";
    cin >> destDistance;
    if (destDistance <= 0) {
        cout << "\nEntered distance is not valid it has to be greater than zero, try again! ";
        return 0;
    }

    cout << endl;
    if (destDistance < 5) {
        driveCost = 5;
    } else {
        driveCost = 7;
    }

    total = driveCost + destDistance * pricesPerMiles[vehicleIndex - 1]; // array index starts from zero
    cout << "\nHi " << name << " total cost for traveling from " << currentlocation << " to " << destination;
    cout << "\nin the vehicle type " << vehicles[vehicleIndex - 1];
    cout << "\nfor the distance of " << destDistance << " miles is (including drive cost): $" << total;
    cout << endl;
    cout << "\nThank you for using Transportation Request Form!";
    cout << endl;

    return 0;
}

void printVehicles(string vehicles[], double pricesPerMiles[], int arraySize) {
    // Display the available vehicle and corresponding price per mile
    // by using setw, setfill and left alignment
    // you can edit if you would like to change data
    cout << left;
    cout << endl;
    cout << setfill('-');
    cout << setw(29) << "" << "Transportation Request Form";
    cout << setw(29) << "" << endl;;
    // Print header
    cout << setfill(' ');
    cout << "| " << setw(40) << "Vehicle Type" << "| " << " " << setw(40) << "Price/Mile" << "| " << endl;
    cout << setfill('-');
    cout << setw(85) << "" << endl;

    // Print Vehicle
    for (int i = 0; i < arraySize; i++) {
        cout << setfill(' ');
        // index is used to print vehicle number
        cout << "| " << setw(40) << to_string(i + 1) + ") " + vehicles[i] << "| " << "$" << setw(40) << pricesPerMiles[i] << "| " << endl;
        cout << setfill('-');
        cout << setw(85) << "" << endl;
    }
    cout << setfill(' '); // Reset fill to blank
}


void fillVehiclesInfo(string vehicles[], double pricesPerMiles[], int arraySize) {
    int index = 0; // Start from first element
    if (index < arraySize) {
        vehicles[index] = "SUV";
        pricesPerMiles[index] = 1.5;
    }
    index = index + 1; // Go to the next element

    if (index < arraySize) {
        vehicles[index] = "Sedan";
        pricesPerMiles[index] = 0.39;
    }
    index = index + 1;
}
